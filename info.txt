
KNOWN INGAME ISSUES:
- end credits up-scroller always places text characters 2 tiles apart, even with 1-tile wide characters
- user-entered strings are entered as double-byte jis characters, so they are printed wide when accessed
    - actually changing the internal representation would require messing with the character codes in the MFM files, so just change the font to be displayed
    - would also be nice to allow 16-character strings instead of just 8
    - ideally, rewrite it to use both ASCII and double-byte chars and measure string length accordingly (but mind a '$' being misinterpreted as control code)
    - it's also impossible to write accented latin chars, maybe repurpose the kana button for this, or maybe there's enough space for it all on one screen
- there are still some missing plaintext strings (e.g other copies of worker job names)
- "rolling" text that automatically advances skips to the next line if it is too big to fit
    - translator seems to be willing to cut the text down to fit one box, but it should still be fixed...
- all text display routines should be fixed to support both ASCII and double-byte chars, making the "double mode" obsolete
- high-level change, but possibly rewrite the game to use a single-byte charset (e.g by extending Windows-1252 with extra graphical chars) instead of shift-jis
- voice clips are still in japanese (lol)


KNOWN TOOL ISSUES:
- the ROM name is hardcoded into the extractors/hacks. not really a problem right now but it will be when digicom2 translation starts
- MBM 68B6A8 and others like it are animated ingame - where are the other frames? will it even be necessary to find them?
    - translator calls pyocola "Pyokora Analogue the 3rd" while MBM 694860 calls her "Pyocola Analogue III", for consistency either one must be changed (i personally prefer the latter)
- MBM 69B8EC has wrong palette 
    - MBM 478DD0 seems like how it's supposed to look
- DSC importing should optimize to remove redundant subscripts




this game has some hidden features:

- hold A, B, Select, Start, L, and R on boot to prompt erasing all save data
- patch $8001e86 with byte $00 to enter debug menu on boot



DSC (script data) format:
word - constant "DSC\0"
word - 0?
word - pointer to MCM data
word - amount of data offsets
word - list of data offsets
        the unpacked script data appears to be separated into "subscripts". these are the offsets
        of all subscripts relative to the start of the uncompressed data.
word - length of uncompressed script data


MBM (bitmap data) format:
word - constant "MBM\0"
byte - image flags
        bit 0 - 0 = multi-palette mode, 1 = 256-color mode
        bit 2 - 1 if image is tilemapped, 0 if not
byte - bits per pixel (only 4 and 8 are used)
halfword - width of image in pixels
halfword - height of image in pixels
halfword - palette entries
halfword - tilemap entries
halfword - total amount of tiles
pointer to palette data
pointer to tilemap (if image is tilemapped, otherwise same as palette pointer)
    tilemap is gba format (INCLUDING FLIP/PALETTE NUMBER BITS)
then the MCM data
the bitmap data is arranged as tiles in gba format

the fullscreen backgrounds may look glitched but they aren't. during dialogue scenes, the upper and lower parts of the background are faded out and overwritten in vram with character portraits. with this arrangement all the overwritable parts of the image are contained in one contiguous block of vram



MCM (compressed file) format:
word - constant "MCM\0"
word - final decompressed size
word - max size of uncompressed data chunks
word - amount of compressed data chunks
4 bytes - decompression sequence
    $00 - end of list
    $01 - rle
    $02 - lz77
    $03 - huffman
    $04 - diff8bit
    $05 - diff16bit
absolute pointers to compressed data

data is split into (maxsize)-byte uncompressed segments, and then these are individually compressed

compressed data is standard gba format

some MCMs have "misleading" sizes in their headers, when the compression inflates the file... for example 6A9220, which reports $40 bytes in its header but the compressed chunk says it is $48 bytes long. allocating only $40 bytes of decompression space will cause a segfault. a decent fix is to always allocate at least a chunk's worth of decompression space, since it's extremely unlikely a chunk $1000 bytes long will be inflated by compression


MFM (charset) data:
word - constant "MFM\0"
byte - ?
byte - width of each char
byte - height of each char
byte - $10 if 4bpp, $00 if 1bpp?
halfword - amount of chars
halfword - size of char in bytes, including code
word - pointer to something? (if 1bpp, 0)
word - absolute pointer to data
data:
halfword - character code
x bytes - data for char
.....repeat for each char

the actual pixel values are probably brightnesses and not palette indexes
0 appears to be transparent


MRM (sample) format:
word - constant "MRM\0"
word - length of data
xx bytes - data
data is signed 8-bit pcm, probably 22050hz




PAKFILE (archive) format:
all numbers in these files are BIG ENDIAN
8 bytes - constant "PAKFILE\0"
word - amount of files
word - always 0?
for each file:
    $38 bytes - filename
    word - offset of file start / $100
    word - file size







script handling code is at $8048424
jumptable is at $8048458-$80484e3 - this means there are $23 commands

Game script format:
codes/params are halfwords
$00 - end of script ($80484e4)
$01 - introduce character portrait ($8048502)
        - movement id - dictates movement, textbox color, talk sound
        - character/textbox position id
        - character portrait id
            note: the upper and lower parts of the background is technically a character,
            creating a letterboxing effect when an actual character is onscreen
$02 - swipe out character portrait ($8048530)
$03 - display string in text box ($8048538)
        - length of string
        - the string itself
$04 - wait for text box completion? or A press ($8048592)
$05 - fade effect ($80485ac)
        - fade mode
            $00 - black -> normal
            $01 - normal -> black
            $02 - white -> normal
            $03 - normal -> white
        - fade speed (higher is slower)
$06 - Set background image ($804851e)
        - Image ID (pointer table to MBM datas at $80ea598)
$07 - Wait xx frames (only after text box completion?) ($804859a)
        - frames to wait
$08 - ? ($80485c4)
        - ?
        - ?
        - ?
        - ?
        - ?
        - ?
        - ?
$09 - same as $22? ($8048550)
$0a - jump depending on choice ($80484ec)
        - length of following list
        - jump offset, relative to start of the subscript, times 2
        - 0?
$0b - set "permanent" text box size ($8048624)
        (calls 0x804b318, then)
        - x-size (scriptinfo + 0xc4, tiles * 2)
        - y-size (scriptinfo + 0xc6, tiles * 2)
$0c - ? ($8048640)
        - ?
$0d - set up counter (used for timing song lyrics) ($8048652)
        - initial value?
$0e - ? ($8048668)
        - ?
$0f - ? ($804867e)
        - ?
$10 - black out background? ($80486b0)
$11 - ? ($80486b8)
        - set scriptinfo + 0x1ee + (this*2)....
        - to this relative jump offset
            (and also scriptinfo+0x1ec to 0)
$12 - set "permanent" text box character portrait position ($80486d4)
        - x-position (scriptinfo + 0x20c)
        - y-position (scriptinfo + 0x20e)
$13 - open text prompt menu ($8048692)
        - ?
        - length of string
        - description string (text MUST be exclusively in double-byte JIS codes)
$14 - set "permanent" text box position ($80486f0)
        - x-position (scriptinfo + 0x210, signed value relative to center?)
        - y-position (scriptinfo + 0x212, 0 is a little lower than the top of the screen)
$15 - ? ($804870c)
$16 - door-closing transition ($8048714)
$17 - screen sine unwipe ($804871c)
        - speed (higher is slower)
$18 - screen sine wipe to black ($804872e)
        - speed (higher is slower)
$19 - ? ($8048740)
        - ?
$1a - ? ($804876a)
$1b - ? ($8048752)
        - ?
        - ?
$1c - play sound effect ($8048778)
        - sfx id
$1d - play music ($804878e)
        - song id
$1e - stop music ($80487ba)
$1f - activate music up counter? ($80487c2)
$20 - wait for music up counter ($80487ca)
        - ?
$21 - fade out music ($80487a4)
        - fade speed (higher is slower)
$22 - create selection menu in text box ($804856c)
        - amount of selections
        - length of string
        - string, choices separated by newlines
higher codes are treated as no-ops

some commands just set two consecutive halfwords....
are they really halfwords, or are they actually just words read as two halfwords to avoid alignment issues?
seems like this is not the case

"permanent" text boxes seem to be used only in cases where new text should be started without closing the text box and opening another one
like gema when you fill out your information, or the store management menu, the shop, etc.



text box info list (indexed by first param of ShowTextBox) is at $80ebd00
access routine at $8098f38

write that sets maximum width of text box is at $80afa08
value is tiles * 6
another write at $8045fba - this one is in increments of two tiles
setting of this value is at $800a608 <- $800ace0.... constant 8?
another one at $800a45c, constant 10
doesn't seem like window width of a particular text line can be found programatically

reading char from text box buffer at $80afda2


subroutine that copies to vram copy buffer at $80ae6d2




text entry menu:
write to text entry buffer at $80b0880/$80b08f2
NOTE: max enterable characters is gotten at $80b085a (one char = TWO BYTES)
max enterable characters is set at $80534a8
the game seems to detect double-byte chars by simply checking if the high bit is set
although this code does not support the display of english characters properly
another one at $8055fdc
routine at $8055eac appears to be the per-frame handler of the menu, it checks joy input
there are also ones for all the buttons at the bottom
note: joy input is flipped to mean 1 = pressed
hiragana data table is at $80e6348
format of each entry:
halfword - x-position in character entry
halfword - y-position in character entry
halfword - character code (MUST be a double-byte JIS code)
halfword - 0 for padding
1bpp charset (MFM format) is at $811d57c

bl at $8055de0 loads the sprite data for the currently highlighted char (char code in r1)




fixing "work info menu" bug:

the issue is with the status screen that shows the workers' equipment. select "おしごと" then press R
ASCII strings on this screen are not shown correctly. each character is 10 pixels apart even though only they are only 5 pixels wide, and every 3 characters the characters are not printed at all. so, "bare hands" becomes "barand"

the obvious solution is to simply accept this, and use double-byte strings for them, making the characters take up the entire space. however, this is not a good solution because the menu where you shop for items for the workers uses the same strings, and that menu works fine with ASCII strings. so, it just looks ugly. it may be possible to hack in separate strings for that menu (possibly an abbreviated list to compensate for the smaller size), but that's really a last resort

the first possible step is to change the code to either always use the thin font, or hard-set the distance between the chars to 5

the game uploads the rendered string to vram in "packets", 3 characters at a time. this is exactly why every 3 characters are missing, i guess because the game relies on 1 character being 2 bytes

3 characters are drawn on each sprite, resulting in some leftover space on the right side. the sprite positions are readjusted slightly to compensate

the bl instruction at $809703c determines the packet width in characters, especially that $20 param (the width of the sprites in pixels) passed in r0

the instruction that determines character distance is at $80b0914 (sub start is at $80b08a4)
"add r0,r8", where r0 is the current x-position and r8 is the add value

instruction that sets the distance is at $80970b2 (sub start at $8096f60)
"strh r0,[r5,#0xc]"

and again at $80af40a (start $80af28c)
"strh r0,[r1,#8]"


seems like it is coded to assume the maximum string length is 6, and to never allocate any more vram than is necessary to hold a rendered string of this length. so, where is the constant?

sprite generation table at $80e7454, each entry is 5 words long, the first word is the width of the sprite  (routine at $8087ddc)

sprite distances fail due to a rounding issue in the division of 6 (characters per sprite)*2 by 5 (character width)






